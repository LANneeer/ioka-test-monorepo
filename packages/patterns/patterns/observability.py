from typing import Protocol, Any
from .message import Command, Event

class ObservabilityHook(Protocol):
    async def on_command_start(self, cmd: Command) -> None: ...
    async def on_command_end(self, cmd: Command, result: Any | None) -> None: ...
    async def on_command_error(self, cmd: Command, err: BaseException) -> None: ...

    async def on_event_start(self, evt: Event) -> None: ...
    async def on_event_end(self, evt: Event) -> None: ...
    async def on_event_error(self, evt: Event, err: BaseException) -> None: ...

    async def on_uow_commit(self) -> None: ...
    async def on_uow_rollback(self) -> None: ...

class NoopHook:
    async def on_command_start(self, cmd: Command) -> None: ...
    async def on_command_end(self, cmd: Command, result: Any | None) -> None: ...
    async def on_command_error(self, cmd: Command, err: BaseException) -> None: ...
    async def on_event_start(self, evt: Event) -> None: ...
    async def on_event_end(self, evt: Event) -> None: ...
    async def on_event_error(self, evt: Event, err: BaseException) -> None: ...
    async def on_uow_commit(self) -> None: ...
    async def on_uow_rollback(self) -> None: ...

class CompositeHook:
    def __init__(self, *hooks: ObservabilityHook) -> None:
        self._hooks = hooks

    async def on_command_start(self, cmd: Command) -> None:
        for h in self._hooks: await h.on_command_start(cmd)
    async def on_command_end(self, cmd: Command, result: Any | None) -> None:
        for h in self._hooks: await h.on_command_end(cmd, result)
    async def on_command_error(self, cmd: Command, err: BaseException) -> None:
        for h in self._hooks: await h.on_command_error(cmd, err)

    async def on_event_start(self, evt: Event) -> None:
        for h in self._hooks: await h.on_event_start(evt)
    async def on_event_end(self, evt: Event) -> None:
        for h in self._hooks: await h.on_event_end(evt)
    async def on_event_error(self, evt: Event, err: BaseException) -> None:
        for h in self._hooks: await h.on_event_error(evt, err)

    async def on_uow_commit(self) -> None:
        for h in self._hooks: await h.on_uow_commit()
    async def on_uow_rollback(self) -> None:
        for h in self._hooks: await h.on_uow_rollback()

